# CI/CD startup template v1.0
# Add this template to your project so that you can easily setup CI/CD on your project.
#
# This template contains the following features:
#   - Automatically triggers a build whenever new code is pushed to main, test, acceptance and production branches
#   - Automatically starts a release to the correct environement dependent on the branch that triggered the build
#

# BRANCHES THAT TRIGGER A BUILD
# Change the branch names (or add or remove branches) so that this fits your project
trigger:
 branches:
  include:
    - main
    - production

variables:
# Branch names variables
# Change these variables to fit your project's needs
  - name: developBranchName
    value: 'refs/heads/main'
    readonly: true
  - name: productionBranchName
    value: 'refs/heads/production'
    readonly: true
  - name: bimRootFolder
    value : 'TestAAS'



stages:
# ------------------------------------------------------------------------
#                             BUILD
# ------------------------------------------------------------------------
# Fill this stage with the build pipelines for all the artifacts you need
- stage: "Build"
  displayName: "BUILD"
  jobs:
    - job: Build
      displayName: "Build Job"
      pool:
        vmImage: "windows-latest"
      steps:
        - task: PowerShell@2
          displayName: Step 0 - Download tabular editor
          inputs:
            targetType: 'inline'
            script: |
             $TabularEditorDownloadUrl = "https://github.com/otykier/TabularEditor/releases/latest/download/TabularEditor.Portable.zip"

             $DownloadDest = join-path (get-location) "TabularEditor.zip"

             Invoke-WebRequest -Uri $TabularEditorDownloadUrl -OutFile $DownloadDest

              $tabularFolder = join-path (get-location) "TabularEditor"

              Expand-Archive -Path $DownloadDest -DestinationPath $tabularFolder
              Remove-Item $DownloadDest


              Write-Host "##vso[task.setvariable variable=tabularFolder]$tabularFolder"
      
        - task: PowerShell@2
          displayName: Step 1 - Best Practice Analysis
          inputs:
            targetType: 'inline'
            script: |
              $models = Get-ChildItem -Path ${{ variables.bimRootFolder }}/*.bim
                            
              foreach ($model in $models) {
                $(tabularFolder)/TabularEditor.exe $model.FullName -A -V
              }

        - task: PublishBuildArtifacts@1
          displayName: Publish TabularEditor
          inputs:
            PathtoPublish: '$(tabularFolder)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
            StoreAsTar: false
# ------------------------------------------------------------------------
#                             DEPLOY
# ------------------------------------------------------------------------
# There is one stage per environement. Please remove the ones that do not apply
# to the current project

# ------- DEV -------
- stage: "Dev"
  displayName: "DEV"
  condition: eq(variables['Build.SourceBranch'], '${{ variables.developBranchName }}')
  jobs:
    - deployment: Deploy
      pool:
        vmImage: "windows-latest"
      environment: Dev
      displayName: "DEV"
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - powershell: |
                    $Form = @{
                        grant_type  = 'client_credentials'
                        client_id   = '$(clientId)'
                        client_secret = "$env:CLIENT_SECRET"
                        scope     = 'https://westeurope.asazure.windows.net/.default'
                    }
                    $LoginResponse = ConvertFrom-Json(Invoke-WebRequest -Uri 'https://login.microsoftonline.com/$(tenantId)/oauth2/v2.0/token' -Method 'POST' -Body $Form)
                    $token = $LoginResponse.access_token
                    Write-Host "##vso[task.setvariable variable=access_token]$token"
                env:
                  CLIENT_SECRET : $(clientSecret)
                displayName: Step 0 - Get Token for AAS admin SP

              - task: PowerShell@2
                displayName: Step 1 - Deploy model to AAS
                inputs:
                  targetType: 'inline'
                  script: |
                    $models = Get-ChildItem -Path ${{ variables.bimRootFolder }}/*.bim
                                  
                    foreach ($model in $models) {
                      $(Agent.BuildDirectory)/drop/TabularEditor.exe $model.FullName -D "Provider=MSOLAP;Data Source=asazure://westeurope.asazure.windows.net/joaollqtest;Initial Catalog=adventureworks;Password=$(access_token);Persist Security Info=True;Impersonation Level=Impersonate" "$(ASDatabaseName)" -O -C -P -R -M -W -E -V
                    }
                    
# ------- Production -------
- stage: "Production"
  displayName: "Production"
  condition: eq(variables['Build.SourceBranch'], '${{ variables.productionBranchName }}')
  jobs:
    - job: waitForValidation
      displayName: Wait for external validation  
      pool: server    
      steps:   
      - task: ManualValidation@0
        inputs:
          # Add here the emails of the users that need to be notified
          notifyUsers: |
                joao.quiterio@outlook.com
          # Customize the message that is sent with the email
          instructions: 'Please validate the build configuration and resume'
    - deployment: Deploy
      dependsOn:
      - waitForValidation
      condition: succeeded('waitForValidation')
      pool:
        vmImage: "windows-latest"
      environment: Production
      displayName: "Production"
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - powershell: |
                    $Form = @{
                        grant_type  = 'client_credentials'
                        client_id   = '$(clientId)'
                        client_secret = "$env:CLIENT_SECRET"
                        scope     = 'https://westeurope.asazure.windows.net/.default'
                    }
                    $LoginResponse = ConvertFrom-Json(Invoke-WebRequest -Uri 'https://login.microsoftonline.com/$(tenantId)/oauth2/v2.0/token' -Method 'POST' -Body $Form)
                    $token = $LoginResponse.access_token
                    Write-Host "##vso[task.setvariable variable=access_token]$token"
                env:
                  CLIENT_SECRET : $(clientSecret)
                displayName: Step 0 - Get Token for AAS admin SP
              - task: CmdLine@2
                displayName: Step 1 - Deploy model to AAS
                inputs:
                  script: '"$(Agent.BuildDirectory)/drop/TabularEditor.exe" "${{ variables.bimRootFolder }}/Model.bim" -D "Provider=MSOLAP;Data Source=asazure://westeurope.asazure.windows.net/joaollqtest;Initial Catalog=adventureworks;Password=$(access_token);Persist Security Info=True;Impersonation Level=Impersonate" "$(ASDatabaseName)" -O -C -P -R -M -W -E -V'
